import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import math
import matplotlib.pyplot as plt
import io
import numpy as np
import seaborn as sns
sns.set_style("whitegrid")  # –°–µ—Ç–∫–∞ –≤ —Å—Ç–∏–ª–µ seaborn
plt.style.use('seaborn-v0_8-pastel')  # –ü—Ä–∏—è—Ç–Ω—ã–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
INITIAL, PRINCIPAL, MONTHLY, RATE, YEARS, WAIT_FOR_RESTART = range(6)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def create_plot(principal, monthly, rate, years):
    monthly_rate = rate / 100 / 12
    months = years * 12
    x = []
    y = []
    
    current = principal
    for month in range(1, months + 1):
        current = current * (1 + monthly_rate) + monthly
        if month % 12 == 0:
            x.append(month // 12)
            y.append(current)
    
    plt.figure(figsize=(10, 6))
    plt.plot(x, y, 'b-', marker='o')
    plt.title('–†–æ—Å—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø–æ –≥–æ–¥–∞–º')
    plt.xlabel('–ì–æ–¥—ã')
    plt.ylabel('–°—É–º–º–∞, —Ä—É–±')
    plt.grid(True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ Y
    ax = plt.gca()
    ax.get_yaxis().set_major_formatter(
        plt.FuncFormatter(lambda x, p: format(int(x), ',').replace(',', ' '))
    )
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    user = update.effective_user
    user_name = user.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    reply_keyboard = [['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç']]
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞.\n\n"
        "–Ø –º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:\n"
        "- –ò—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n"
        "- –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥\n"
        "- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return INITIAL

async def initial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100000):",
        reply_markup=ReplyKeyboardRemove(),
    )
    return PRINCIPAL

async def principal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        principal = float(update.message.text.replace(' ', '').replace(',', '.'))
        if principal < 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return PRINCIPAL
        context.user_data['principal'] = principal
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10000):")
        return MONTHLY
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return PRINCIPAL

async def monthly(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        monthly = float(update.message.text.replace(' ', '').replace(',', '.'))
        if monthly < 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return MONTHLY
        context.user_data['monthly'] = monthly
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è 10%):")
        return RATE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return MONTHLY

async def rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        rate = float(update.message.text.replace(' ', '').replace(',', '.'))
        if rate < 0:
            await update.message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return RATE
        context.user_data['rate'] = rate
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≥–æ–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
        return YEARS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return RATE

async def years(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input = update.message.text.strip().replace(' ', '').replace(',', '.')
        if not user_input.replace('.', '').isdigit():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return YEARS
            
        years = float(user_input)
        if years <= 0:
            await update.message.reply_text("–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return YEARS

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        principal = context.user_data.get('principal')
        monthly = context.user_data.get('monthly')
        rate = context.user_data.get('rate')
        
        if None in (principal, monthly, rate):
            await update.message.reply_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            return ConversationHandler.END

        # –†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        monthly_rate = rate / 100 / 12
        months = int(years * 12)
        
        # –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        monthly_data = []
        total = principal
        for month in range(1, months + 1):
            total = total * (1 + monthly_rate) + monthly
            monthly_data.append(total)
        
        total_invested = principal + monthly * months
        income = total - total_invested
        monthly_income = total * monthly_rate

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        try:
            plot_buf_yearly = create_yearly_plot(principal, monthly, rate, years)
            plot_buf_monthly = create_monthly_plot(monthly_data, years)
            plot_buf_income = create_monthly_income_plot(monthly_data, monthly, rate, years)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            plot_buf_yearly = None
            plot_buf_monthly = None
            plot_buf_income = None

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
        def format_num(num):
            return f"{num:,.2f}".replace(",", " ").replace(".", ",")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_msg = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n\n"
            f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {format_num(principal)} —Ä—É–±\n"
            f"‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {format_num(monthly)} —Ä—É–±\n"
            f"‚Ä¢ –ì–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {rate}%\n"
            f"‚Ä¢ –°—Ä–æ–∫: {years} –ª–µ—Ç ({months} –º–µ—Å—è—Ü–µ–≤)\n\n"
            f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {format_num(total)} —Ä—É–±\n"
            f"üí∞ –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: {format_num(total_invested)} —Ä—É–±\n"
            f"üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥: {format_num(income)} —Ä—É–±\n"
            f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {format_num(income / total_invested * 100)}%\n\n"
            f"üí∏ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ –∫–æ–Ω–µ—Ü —Å—Ä–æ–∫–∞: {format_num(monthly_income)} —Ä—É–±"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if plot_buf_yearly:
            await update.message.reply_photo(photo=plot_buf_yearly, caption="–†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –≥–æ–¥–∞–º")
        if plot_buf_monthly:
            await update.message.reply_photo(photo=plot_buf_monthly, caption="–†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –º–µ—Å—è—Ü–∞–º")
        if plot_buf_income:
            await update.message.reply_photo(photo=plot_buf_income, caption="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        await update.message.reply_text(result_msg)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        reply_markup = ReplyKeyboardMarkup(
            [["üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç"]], resize_keyboard=True
        )
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:",
            reply_markup=reply_markup
        )

        return WAIT_FOR_RESTART

    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return YEARS
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

def create_yearly_plot(principal, monthly, rate, years):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –≥–æ–¥–∞–º"""
    monthly_rate = rate / 100 / 12
    months = int(years * 12)  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int
    x = []
    y = []
    
    current = principal
    for month in range(1, months + 1):
        current = current * (1 + monthly_rate) + monthly
        if month % 12 == 0:
            x.append(month // 12)
            y.append(current)
    
    plt.figure(figsize=(10, 5))
    plt.plot(x, y, 'b-', marker='o')
    plt.title('–†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –≥–æ–¥–∞–º')
    plt.xlabel('–ì–æ–¥—ã')
    plt.ylabel('–°—É–º–º–∞, —Ä—É–±')
    plt.grid(True)
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

def create_monthly_plot(monthly_data, years):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –º–µ—Å—è—Ü–∞–º"""
    plt.figure(figsize=(12, 6))
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º years –≤ int –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —à–∞–≥–∞
    years_int = int(years)
    step = 6 if years_int >= 3 else 3 if years_int >= 1 else 1
    
    x = list(range(1, len(monthly_data)+1))
    plt.plot(x, monthly_data, 'g-', linewidth=1.5)
    plt.title('–†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ –º–µ—Å—è—Ü–∞–º')
    plt.xlabel('–ú–µ—Å—è—Ü—ã')
    plt.ylabel('–°—É–º–º–∞, —Ä—É–±')
    plt.grid(True)
    plt.xticks(x[::step])
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

# ===== –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ì–†–ê–§–ò–ö–ê –î–û–•–û–î–ê =====
def create_monthly_income_plot(monthly_data, monthly_contrib, rate, years):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    monthly_rate = rate / 100 / 12
    x = list(range(1, len(monthly_data)+1))
    income_per_month = []
    
    prev_value = monthly_contrib  # –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ + –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    for current_value in monthly_data:
        income = current_value - prev_value - monthly_contrib
        income_per_month.append(income)
        prev_value = current_value
    
    plt.figure(figsize=(12, 6))
    plt.plot(x, income_per_month, 'r-', linewidth=1.5)
    plt.title('–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏')
    plt.xlabel('–ú–µ—Å—è—Ü—ã')
    plt.ylabel('–î–æ—Ö–æ–¥, —Ä—É–±')
    plt.grid(True, linestyle='--', alpha=0.7)
    
    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å–∏ X
    step = 6 if years >= 3 else 3 if years >= 1 else 1
    plt.xticks(x[::step])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    ax = plt.gca()
    ax.get_yaxis().set_major_formatter(
        plt.FuncFormatter(lambda x, p: format(int(x), ',').replace(',', ' '))
    )
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=80, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    return buf

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
    await initial(update, context)
    return PRINCIPAL

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token("7827428493:AAHlNg4GurlW9q1uuvYyiXMH9ZPYcIsOfXs").build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            INITIAL: [MessageHandler(filters.Regex(r'^(–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç)$'), initial)],
            PRINCIPAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, principal)],
            MONTHLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, monthly)],
            RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rate)],
            YEARS: [MessageHandler(filters.TEXT & ~filters.COMMAND, years)],
            WAIT_FOR_RESTART: [
                MessageHandler(filters.Regex(r'^(üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç)$'), restart)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()